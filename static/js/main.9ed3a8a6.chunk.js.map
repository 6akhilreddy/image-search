{"version":3,"sources":["components/Header.js","components/ImageResults.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","style","marginBottom","className","href","ImageResults","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","getRandom","min","max","Math","ceil","floor","random","inherits","createClass","key","value","_this2","images","props","PHOTO_SET","map","img","push","src","largeImageURL","height","width","react_photo_gallery_esm","photos","Component","Search","state","apiURL","apiKey","searchText","amount","onTextChange","e","val","target","setState","defineProperty","name","axios","get","then","res","data","hits","catch","err","console","log","id","type","required","onChange","fontWeight","fontSize","components_ImageResults","App","components_Header","components_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOAceA,MAZf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,aAAa,KACtBJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACXL,EAAAC,EAAAC,cAAA,KAAGI,KAAK,aAAaD,UAAU,qBAA/B,mCCwBDE,EA5Bf,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAJ,IAAAe,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MAEIQ,UAAU,SAACC,EAAKC,GAGZ,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,EAAM,IAAMA,GAL7DhB,EAAA,OAAAC,OAAAqB,EAAA,EAAArB,CAAAJ,EAAAC,GAAAG,OAAAsB,EAAA,EAAAtB,CAAAJ,EAAA,EAAA2B,IAAA,SAAAC,MAAA,WAQW,IAAAC,EAAAvB,KACEwB,EAAQxB,KAAKyB,MAAbD,OACDE,EAAU,GASlB,OAREF,EAAOG,IAAI,SAAAC,GAMT,OALAF,EAAUG,KAAK,CACXC,IAAIF,EAAIG,cACRC,OAAOT,EAAKX,UAAU,EAAE,GACxBqB,MAAMV,EAAKX,UAAU,EAAE,KAEpBc,IAGTvC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAASC,OAAQT,SArBzBhC,EAAA,CAAkC0C,8BC8DnBC,EA7Df,SAAA1C,GAAA,SAAA0C,IAAA,IAAAzC,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqC,GAAA,QAAApC,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAuC,IAAA5B,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MAEIkC,MAAM,CACFC,OAAO,0BACPC,OAAO,qCACPC,WAAW,GACXC,OAAO,GACPlB,OAAO,IAPf3B,EAUI8C,aAAe,SAAAC,GACX,IAAMC,EAAMD,EAAEE,OAAOxB,MACrBzB,EAAKkD,SAALjD,OAAAkD,EAAA,EAAAlD,CAAA,GAAiB8C,EAAEE,OAAOG,KAAOJ,GAAO,WAC1B,KAARA,EACFhD,EAAKkD,SAAS,CAAEvB,OAAQ,KAExB0B,IACGC,IADH,GAAAxC,OAEOd,EAAKyC,MAAMC,OAFlB,UAAA5B,OAEiCd,EAAKyC,MAAME,OAF5C,OAAA7B,OAGMd,EAAKyC,MAAMG,WAHjB,+BAAA9B,OAIkCd,EAAKyC,MAAMI,OAJ7C,qBAMGU,KAAK,SAAAC,GAAG,OAAIxD,EAAKkD,SAAS,CAAEvB,OAAQ6B,EAAIC,KAAKC,SAC7CC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAvBxC5D,EAAA,OAAAC,OAAAqB,EAAA,EAAArB,CAAAuC,EAAA1C,GAAAG,OAAAsB,EAAA,EAAAtB,CAAAuC,EAAA,EAAAhB,IAAA,SAAAC,MAAA,WA+BI,OACEnC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACXL,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACXL,EAAAC,EAAAC,cAAA,SAAOuE,GAAG,SAASC,KAAK,SAASC,UAAQ,EACzCb,KAAK,aACL3B,MAAOtB,KAAKsC,MAAMG,WAClBsB,SAAU/D,KAAK2C,aACfrD,MAAO,CAAC0E,WAAW,MAAMC,SAAS,UAElC9E,EAAAC,EAAAC,cAAA,SAAOG,UAAU,cAChBL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,kBAAb,WACDL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,kBAAb,aAMhBL,EAAAC,EAAAC,cAAA,WACCW,KAAKsC,MAAMd,OAAOrB,OAAS,EAC1BhB,EAAAC,EAAAC,cAAC6E,EAAD,CAAc1C,OAAQxB,KAAKsC,MAAMd,SAC/B,UAtDZa,EAAA,CAA4BD,aCWb+B,mLATX,OACEhF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAC+E,EAAD,MACAjF,EAAAC,EAAAC,cAACgF,EAAD,cALUjC,aCQEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzF,EAAAC,EAAAC,cAACwF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.9ed3a8a6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header() {\r\n  return (\r\n    <div style={{marginBottom:15}}>\r\n        <nav>\r\n            <div className=\"nav-wrapper\">\r\n                <a href=\"index.html\" className=\"brand-logo center\">PhotoSearch</a>\r\n            </div>\r\n        </nav>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react'\r\nimport Gallery from 'react-photo-gallery';\r\n\r\nexport class ImageResults extends Component {\r\n    \r\n    getRandom=(min, max)=> {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;  \r\n      }\r\n\r\n  render() {\r\n      const {images}=this.props\r\n      const PHOTO_SET=[]\r\n      images.map(img=>{\r\n        PHOTO_SET.push({\r\n            src:img.largeImageURL,\r\n            height:this.getRandom(1,2),\r\n            width:this.getRandom(1,3)\r\n        })\r\n        return PHOTO_SET\r\n      })\r\n    return (\r\n      <div>\r\n        <Gallery photos={PHOTO_SET} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default ImageResults\r\n","import React, { Component } from 'react'\r\nimport ImageResults from './ImageResults'\r\nimport axios from 'axios'\r\n\r\nexport class Search extends Component {\r\n\r\n    state={\r\n        apiURL:'https://pixabay.com/api',\r\n        apiKey:'11135879-e5e49f7bc55d3355963e98725',\r\n        searchText:'',\r\n        amount:20,\r\n        images:[]\r\n    }\r\n\r\n    onTextChange = e => {\r\n        const val = e.target.value;\r\n        this.setState({ [e.target.name]: val }, () => {\r\n          if (val === '') {\r\n            this.setState({ images: [] });\r\n          } else {\r\n            axios\r\n              .get(\r\n                `${this.state.apiURL}/?key=${this.state.apiKey}&q=${\r\n                  this.state.searchText\r\n                }&image_type=photo&per_page=${this.state.amount}&safesearch=true`\r\n              )\r\n              .then(res => this.setState({ images: res.data.hits }))\r\n              .catch(err => console.log(err));\r\n          }\r\n        });\r\n    };\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav>\r\n            <div className=\"nav-wrapper\">\r\n                <form>\r\n                    <div className=\"input-field\">\r\n                        <input id=\"search\" type=\"search\" required\r\n                        name=\"searchText\"\r\n                        value={this.state.searchText}\r\n                        onChange={this.onTextChange}\r\n                        style={{fontWeight:'600',fontSize:'30px'}}\r\n                        />\r\n                        <label className=\"label-icon\"\r\n                        ><i className=\"material-icons\">search</i></label>\r\n                        <i className=\"material-icons\">close</i>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </nav>\r\n\r\n        <br />\r\n        {this.state.images.length > 0 ? (\r\n          <ImageResults images={this.state.images} />\r\n        ) : null}\r\n\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Search\r\n","import React, { Component } from 'react';\nimport Header from './components/Header'\nimport Search from './components/Search';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Search />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}